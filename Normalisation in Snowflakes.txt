-- To study Normalisation of the data in Snowflakes

-- created database
CREATE DATABASE NEW_TEST; 

USE NEW_TEST; 

  
-- Creating new schema
CREATE SCHEMA NEW_SCHEMA; 

USE SCHEMA NEW_SCHEMA; 

  
-- Creating a new file format
CREATE OR REPLACE FILE FORMAT NEW_CSV 
TYPE = 'CSV' 
FIELD_DELIMITER = ',' 
FIELD_OPTIONALLY_ENCLOSED_BY = '\"' 
DATE_FORMAT = 'MM/DD/YYYY HH:MI'; 
  
-- Creating a new stage
CREATE STAGE NEW_STAGE; 

  
-- list the new stage to check the data
LIST @NEW_TEST.NEW_SCHEMA.NEW_STAGE; 

  
-- Trial Advertising Table creation
CREATE OR REPLACE TABLE ADVERTISING ( 
ID VARCHAR(10),
TV NUMBER, 
RADIO NUMBER, 
NEWSPAPER NUMBER,
SALES NUMBER 
); 

--pushing csv from local system into snowflake using snowsql  
--put file:///c:/users/diacto/downloads/archive/advertising.csv @new_stage 

COPY INTO ADVERTISING FROM @NEW_TEST.NEW_SCHEMA.NEW_STAGE/ADVERTISING.CSV 
FILE_FORMAT = (FORMAT_NAME = NEW_CSV SKIP_HEADER = 1); 

  
-- validation
SELECT * FROM NEW_TEST.NEW_SCHEMA.ADVERTISING; 

  
--Creation of table for Sample Sales
CREATE OR REPLACE TABLE NEW_TEST.NEW_SCHEMA.SALES_SAMPLE_DATA(
ORDERNUMBER INTEGER, QUANTITYORDERED INTEGER, PRICEEACH INTEGER,ORDERLINENUMBER NUMBER(12,2) ,SALES  NUMBER(12,2),ORDERDATE VARCHAR(50) ,STATUS VARCHAR(50) ,QTR_ID INTEGER ,MONTH_ID INTEGER ,YEAR_ID  NUMBER(12,2),PRODUCTLINE VARCHAR(50),MSRP  NUMBER(12,2),PRODUCTCODE  VARCHAR(50),CUSTOMERNAME VARCHAR(50),PHONE VARCHAR(50),ADDRESSLINE1 VARCHAR(50),ADDRESSLINE2 VARCHAR(50) ,CITY VARCHAR(50),STATE VARCHAR(50),POSTALCODE VARCHAR(50),COUNTRY VARCHAR(50),TERRITORY VARCHAR(50),CONTACTLASTNAME VARCHAR(50),CONTACTFIRSTNAME VARCHAR(50),DEALSIZE VARCHAR(50) 
); 

--pushing csv from local system into snowflake using snowsql
--put file:///c:/users/diacto/downloads/archive/sales_data_sample.csv @new_stage 
  
-- Copying the data from stage into the table
COPY INTO SALES_SAMPLE_DATA FROM @NEW_STAGE/SALES_DATA_SAMPLE.CSV 
FILE_FORMAT = (FORMAT_NAME = NEW_CSV SKIP_HEADER = 1) 
ON_ERROR = 'CONTINUE'; 
 
--validation
SELECT * FROM NEW_TEST.NEW_SCHEMA.SALES_SAMPLE_DATA; 
 

-- separate schema for normalised data 
CREATE OR REPLACE SCHEMA DIM_FACT_SCHEMA; 
USE SCHEMA DIM_FACT_SCHEMA; 

--Creating Dimensions and Fact Tables

--Creating Dim_date table
CREATE OR REPLACE TABLE DIM_DATE AS 
WITH RECURSIVE DATES AS (SELECT DATEADD(DAY, -1, CURRENT_DATE()) AS DATE
    UNION ALL
    SELECT DATEADD(DAY, -1, DATE) FROM DATES WHERE DATE >= DATEADD(YEAR, -2, CURRENT_DATE()))
SELECT DATE,YEAR(DATE) AS YEAR,QUARTER(DATE) AS QUARTER,MONTH(DATE) AS MONTH,WEEKOFYEAR(DATE) AS WEEK,DAYOFWEEKISO(DATE) AS WEEKDAY,DAY(DATE) AS DAY FROM DATES ORDER BY DATE DESC;

SELECT * FROM DIM_DATE LIMIT 50;


--Creating Dim_Status table
CREATE OR REPLACE TABLE DIM_STATUS (SID INTEGER AUTOINCREMENT START 1 INCREMENT 1, STATUS VARCHAR(50), ORDERNUMBER INTEGER); 

--Creating Dim_Region table
CREATE OR REPLACE TABLE DIM_REGION (RID INTEGER AUTOINCREMENT START 1 INCREMENT 1, ORDERNUMBER INTEGER,ADDRESSLINE1 VARCHAR(50),ADDRESSLINE2 VARCHAR(50) ,CITY VARCHAR(50),STATE VARCHAR(50),POSTALCODE VARCHAR(50),COUNTRY VARCHAR(50),TERRITORY VARCHAR(50)); 

--Creating Dim_Product table
CREATE OR REPLACE TABLE DIM_PRODUCT (MSRP NUMBER, PRODUCTCODE VARCHAR (50), PRODUCTLINE VARCHAR (50)); 

--Creating Dim_Customer table
CREATE OR REPLACE TABLE DIM_CUSTOMER (CID INTEGER AUTOINCREMENT START 1 INCREMENT 1, ORDERNUMBER INTEGER, 
CUSTOMERNAME VARCHAR (50),PHONE VARCHAR (20), CONTACTLASTNAME VARCHAR (20), CONTACTFIRSTNAME VARCHAR (20)); 

--Creating Fact_Sales table
CREATE OR REPLACE TABLE FACT_SALES (ORDERNUMBER NUMBER, QUANTITYORDERED NUMBER, PRICEEACH NUMBER, ORDERLINENUMBER NUMBER(12,2),SALES NUMBER (12,2),ORDERDATE VARCHAR (50),DEALSIZE VARCHAR (50), SID NUMBER (20),RID NUMBER (20),PRODUCTCODE VARCHAR (50),CID NUMBER (20)); 

-- Data Insertion

--Inserting data into Dim_Status
INSERT INTO DIM_STATUS (STATUS, ORDERNUMBER) 
SELECT DISTINCT STATUS, ORDERNUMBER FROM NEW_TEST.NEW_SCHEMA.SALES_SAMPLE_DATA; 

--validating
SELECT * FROM DIM_STATUS;  

--Inserting data into Dim_Region
INSERT INTO DIM_REGION (ORDERNUMBER ,ADDRESSLINE1,ADDRESSLINE2,CITY,STATE,POSTALCODE,COUNTRY,TERRITORY) 
SELECT DISTINCT ORDERNUMBER, ADDRESSLINE1,ADDRESSLINE2,CITY,STATE,POSTALCODE,COUNTRY,TERRITORY FROM NEW_TEST.NEW_SCHEMA.SALES_SAMPLE_DATA; 

--validation
SELECT * FROM DIM_REGION; 

  
--Inserting data into Dim_Product
INSERT INTO DIM_PRODUCT (PRODUCTCODE ,MSRP, PRODUCTLINE) 
SELECT DISTINCT PRODUCTCODE, MSRP,PRODUCTLINE FROM NEW_TEST.NEW_SCHEMA.SALES_SAMPLE_DATA; 

--validation
SELECT DISTINCT PRODUCTCODE,MSRP ,PRODUCTLINE FROM NEW_TEST.NEW_SCHEMA.SALES_SAMPLE_DATA ORDER BY MSRP ; 
SELECT PRODUCTCODE, COUNT (PRODUCTCODE) AS COUNT_TOTAL FROM NEW_TEST.NEW_SCHEMA.SALES_SAMPLE_DATA GROUP BY PRODUCTCODE; 
SELECT COUNT(PRODUCTCODE) FROM NEW_TEST.NEW_SCHEMA.SALES_SAMPLE_DATA WHERE PRODUCTCODE = 'S10_1678'; 

--Inserting data into Dim_Customer

INSERT INTO DIM_CUSTOMER (CUSTOMERNAME ,PHONE, CONTACTLASTNAME , CONTACTFIRSTNAME, ORDERNUMBER) 
SELECT DISTINCT CUSTOMERNAME ,PHONE , CONTACTLASTNAME, CONTACTFIRSTNAME, ORDERNUMBER FROM NEW_TEST.NEW_SCHEMA.SALES_SAMPLE_DATA; 
 
--validation
SELECT * FROM DIM_CUSTOMER; 

--Inserting data into Fact_Sales
INSERT INTO FACT_SALES (ORDERNUMBER, QUANTITYORDERED,PRICEEACH, ORDERLINENUMBER, SALES, ORDERDATE, DEALSIZE, PRODUCTCODE) 
SELECT ORDERNUMBER, QUANTITYORDERED,PRICEEACH, ORDERLINENUMBER, SALES, ORDERDATE, DEALSIZE, PRODUCTCODE FROM NEW_TEST.NEW_SCHEMA.SALES_SAMPLE_DATA WHERE ORDERNUMBER IS NOT NULL; 

SELECT * FROM FACT_SALES;

--Insert CID (CustomerID) into Fact_Sales 
MERGE INTO FACT_SALES F 
USING (SELECT CID, ORDERNUMBER FROM DIM_CUSTOMER )D  
ON F.ORDERNUMBER = D.ORDERNUMBER 
WHEN MATCHED THEN 
  UPDATE SET F.CID = D.CID; 

--Validation

SELECT * FROM FACT_SALES; 


--Insert SID(Status) into Fact_Sales

MERGE INTO FACT_SALES F 
USING (SELECT SID, ORDERNUMBER FROM DIM_STATUS ) D 
ON F.ORDERNUMBER = D.ORDERNUMBER 
WHEN MATCHED THEN  
    UPDATE SET F.SID = D.SID; 

--Validation 

SELECT * FROM FACT_SALES; 

  
--Insert RID (Regionid) into Fact_Sales
MERGE INTO FACT_SALES F 
USING (SELECT RID, ORDERNUMBER FROM DIM_REGION ) D 
ON F.ORDERNUMBER = D.ORDERNUMBER 
WHEN MATCHED THEN 
    UPDATE SET F.RID = D.RID; 

--Validation
SELECT * FROM FACT_SALES; 

SELECT F.ORDERNUMBER, S.STATUS, C.CUSTOMERNAME, R.CITY, R.STATE, R.COUNTRY FROM FACT_SALES F
JOIN DIM_STATUS S ON F.SID = S.SID
JOIN DIM_CUSTOMER C ON C.CID = F.CID
JOIN DIM_REGION R ON R.RID = F.RID;  

  

  

  

  

 

 